process CLIENTS = {    

    
    service = DaqMonitorROOTBackEnd{ }
    
    # the DQM Clients source
    source = DQMEventSource{ 
	untracked int32 maxEvents = -1
	untracked string meSubscriptionList = "MESubscriptionList.xml"
	untracked string qtList = "QualityTests.xml"
	untracked string server = "lxplus014.cern.ch"
	untracked int32 port = 9090
	untracked string name = "DTDQMClient"
	untracked int32 reconnect_delay_secs = 5
	untracked bool actAsServer = true
    }
    
    #Geometry
    include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
    include "Geometry/DTGeometry/data/dtGeometry.cfi"

    es_source ttrig = PoolDBESSource {  
	VPSet toGet = {
	    {
		string record = "DTTtrigRcd" 
		string tag = "tTrig"
	    }
	} 
	bool loadAll = true
	string connect = "sqlite_file:database/tTrig3811.db"
	untracked string catalog = "file:database/tTrig.xml"
	string timetype = "runnumber" 
	PSet DBParameters = {
            untracked string authenticationPath="."
            untracked int32 messageLevel=0
        }
    }
    
    
    
    module testClient = DTtTrigCalibrationTest{
	untracked bool debug = true	
	}	



    module ResolutionTest = DTResolutionTest{
      	untracked bool debug = true
	untracked string outputFile = "DTResolutionTest.root"
	untracked bool writeHisto = true
	untracked string histoTag = "hResDist"	
	}

    module DataIntegrityTest = DTDataIntegrityTest{
	untracked bool debug = true
	untracked int32 saveResultsFrequency = 5
 	untracked string outputFile = "DataIntegrityTest.root"
	untracked bool writeHisto = true	
    }
    
#     service = MessageLogger {
# 	untracked vstring destinations = { "cout" }
# 	untracked vstring debugModules = { "*" }
# 	untracked PSet cout = {
# 	    untracked string threshold = "WARNING"
# 	    untracked bool noLineBreaks = true
# 	    untracked PSet WARNING = {untracked int32 limit = 0 }
# 	}
#     } 

    
    path p = {DataIntegrityTest,testClient,ResolutionTest}

	
}


