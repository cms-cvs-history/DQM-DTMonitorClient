process CLIENTS = {    

    
    service = DaqMonitorROOTBackEnd{ }
    
    # the DQM Clients source
    source = DQMEventSource{ 
	untracked string meSubscriptionList = "MESubscriptionList.xml"
	untracked string qtList = "QualityTests.xml"
	untracked bool getQualityTestsFromFile = true	
	untracked int32 numberOfUpdatesToBeSkipped = 1
	untracked string server = "lxplus008.cern.ch"
	untracked int32 port = 9090
	untracked string name = "DTDQMClient"
	untracked int32 reconnect_delay_secs = 2
	untracked bool actAsServer = true
    }
    untracked PSet maxEvents = {untracked int32 input = -1}

    #Geometry
    include "CondCore/DBCommon/data/CondDBSetup.cfi"
    include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
    include "Geometry/DTGeometry/data/dtGeometry.cfi"



    #tTrig
      es_source tTrigMapping = PoolDBESSource {
      using CondDBSetup
      string connect =  "sqlite_file:database/tTrig_Sec8.db"
      untracked string catalog = "file:database/catalog.xml"
      string timetype = "runnumber"
      untracked uint32 authenticationMethod = 0
      VPSet toGet = {{
              string record = "DTTtrigRcd"
              string tag = "tTrig"
          }}
     }



    module tTrigCalibrationTest = DTtTrigCalibrationTest{
       #Names of the quality test: it must match those specified in "qtList"
       untracked string tTrigTestName = "tTrigOffSet"
    }
	

    module resolutionTest = DTResolutionTest{
	untracked string outputFile = "DTResolutionTest.root"
	untracked bool writeHisto = true
	untracked string histoTag = "hResDist"	

        #Names of the quality tests: they must match those specified in "qtList"
	untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
	untracked string meanTestName = "ResidualsMeanInRange"
	untracked string sigmaTestName = "ResidualsSigmaInRange"
    }


    module efficiencyTest = DTEfficiencyTest{
	untracked string outputFile = "DTEfficiencyTest.root"
        untracked bool writeHisto = true	

	#Names of the quality tests: they must match those specified in "qtList"
	untracked string EfficiencyTestName = "EfficiencyInRange"
	untracked string UnassEfficiencyTestName = "UnassEfficiencyInRange"

    }

	module chamberEfficiencyTest = DTChamberEfficiencyTest {
	untracked string outputFile = "DTChamberEfficiencyTest.root"
        untracked bool writeHisto = true	

	#Names of the quality tests: they must match those specified in "qtList"
	untracked string XEfficiencyTestName = "ChEfficiencyInRangeX"
	untracked string YEfficiencyTestName = "ChEfficiencyInRangeY"

    }


      module DataIntegrityTest = DTDataIntegrityTest{
	untracked int32 saveResultsFrequency = 5
 	untracked string outputFile = "DataIntegrityTest.root"
	untracked bool writeHisto = true	
   	untracked bool doTimeHisto = true
	untracked int32 nTimeBin = 20
 }


	module deadChannelTest = DTDeadChannelTest{
	untracked string outputFile = "DTDeadChannelTest.root"
        untracked bool writeHisto = true	

	#Names of the quality tests: they must match those specified in "qtList"
	untracked string EfficiencyTestName = "OccupancyDiffInRange"

    }

    module triggerTest = DTLocalTriggerTest{
        untracked bool dataFromDDU = true
        untracked string outputFile = "DTLocalTriggerTest.root"
        untracked int32 resultSavingRate = 10
        untracked string sourceFolder = "Collector/FU0/"
	untracked bool writeHisto = true
    }

	
    service = MessageLogger {
    untracked vstring destinations = { "detailedInfo"
                                     , "critical"
                                     , "cout"
                                     }
    untracked PSet critical     = { untracked string threshold = "ERROR"   }
    untracked PSet detailedInfo = { untracked string threshold = "INFO"    } 
    untracked PSet cout             = { untracked string threshold = "INFO" }
    vstring statistics   = { "statistics.txt" }
    PSet statistics.txt  = { string threshold  = "WARNING"   }
	
    }	


    path p = {tTrigCalibrationTest, resolutionTest, efficiencyTest,chamberEfficiencyTest,deadChannelTest,triggerTest}

	
}


